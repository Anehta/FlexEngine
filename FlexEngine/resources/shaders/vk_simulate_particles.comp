#version 450

struct Particle
{
	vec4 pos;
	vec4 vel;
};

layout (binding = 0) buffer PositionBuffer
{
	Particle particles[];
};

layout (local_size_x = 256) in;

layout (binding = 1) uniform UBODynamic
{
	float dt;
	float destX;
	float destY;
	float destZ;
	int particleCount;
} uboDynamic;

vec3 attraction(vec3 pos, vec3 attractPos)
{
	vec3 delta = attractPos - pos;
	float damp = 0.5;
	float dDampedDot = dot(delta, delta) + damp;
	float invDist = 1.0 / dDampedDot;
	float invDistCubed = invDist*invDist*invDist;
	return delta * invDistCubed * 0.0035;
}

vec3 repulsion(vec3 pos, vec3 repulsePos)
{
	vec3 delta = repulsePos - pos;
	float targetDist = sqrt(dot(delta, delta));
	return delta * (1.0 / targetDist * targetDist * targetDist) * -0.000035;
}

void main()
{
	uint index = gl_GlobalInvocationID.x;
	if (index >= uboDynamic.particleCount)
	{
		return;
	}

	vec3 vVel = particles[index].vel.xyz;
	vec3 vPos = particles[index].pos.xyz;

	vec3 destPos = vec3(0);

	vec3 delta = destPos - vPos;
	float targetDist = sqrt(dot(delta, delta));
	vVel += repulsion(vPos, destPos) * 0.05;

	vPos += vVel * uboDynamic.dt;

	particles[index].pos.xyz = vPos.xyz;
	particles[index].vel.xyz = vVel.xyz;
}