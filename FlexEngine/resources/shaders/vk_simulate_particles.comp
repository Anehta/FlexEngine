#version 450

layout (binding = 0) uniform UBODynamic
{
	float dt;
	float destX;
	float destY;
	float destZ;
	int particleCount;
} uboDynamic;

struct Particle
{
	float data[16];
	/*
		vec3 pos;
		vec2 uv;
		vec4 col;
		vec3 vel;
		vec4 extraVec4;
	*/
	//float pad[48];
};

layout (binding = 1) buffer PositionBuffer
{
	Particle particles[];
};

layout (local_size_x = 256) in;

vec3 attraction(vec3 pos, vec3 attractPos)
{
	vec3 delta = attractPos - pos;
	float damp = 0.5;
	float dDampedDot = dot(delta, delta) + damp;
	float invDist = 1.0 / dDampedDot;
	float invDistCubed = invDist*invDist*invDist;
	return delta * invDistCubed * 0.0035;
}

vec3 repulsion(vec3 pos, vec3 repulsePos)
{
	vec3 delta = repulsePos - pos;
	float targetDist = sqrt(dot(delta, delta))+0.0001;
	return delta * (1.0 / targetDist * targetDist * targetDist) * -0.000035;
}

void main()
{
	uint index = gl_GlobalInvocationID.x;
	if (index >= uboDynamic.particleCount)
	{
		return;
	}

	vec3 pPos = vec3(particles[index].data[0]);
	vec3 pVel = vec3(particles[index].data[10]);

	vec3 destPos = vec3(0);

	vec3 delta = destPos - pPos;
	float targetDist = length(pVel);
	pVel += repulsion(pPos, destPos) * 0.05;

	pPos += pVel * uboDynamic.dt;

	particles[index].data[0] = pPos[0];
	particles[index].data[1] = pPos[1];
	particles[index].data[2] = pPos[2];
	particles[index].data[10] = pVel[0];
	particles[index].data[11] = pVel[1];
	particles[index].data[12] = pVel[2];
	particles[index].data[13] = 1.0; // Size
}